
##########
# prompt #
##########

if tput setaf 1 &> /dev/null; then
    tput sgr0 # reset colors
    bold=$(tput bold)
    reset=$(tput sgr0)
    # Solarized colors, taken from http://git.io/solarized-colors.
    black=$(tput setaf 0)
    blue=$(tput setaf 33)
    cyan=$(tput setaf 37)
    green=$(tput setaf 64)
    orange=$(tput setaf 166)
    purple=$(tput setaf 125)
    red=$(tput setaf 124)
    violet=$(tput setaf 61)
    white=$(tput setaf 15)
    yellow=$(tput setaf 136)
else
    bold=''
    reset="\e[0m"
    black="\e[1;30m"
    blue="\e[1;34m"
    cyan="\e[1;36m"
    green="\e[1;32m"
    orange="\e[1;33m"
    purple="\e[1;35m"
    red="\e[1;31m"
    violet="\e[1;35m"
    white="\e[1;37m"
    yellow="\e[1;33m"
fi

git_prompt() {
    local s=''
    local branchName=''

    # Check if the current directory is in a Git repository.
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

            # Ensure the index is up to date.
            git update-index --really-refresh -q &>/dev/null

            # Check for uncommitted changes in the index.
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s+='+'
            fi;

            # Check for unstaged changes.
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s+='*'
            fi;

            # Check for untracked files.
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s+='?'
            fi;

            # Check for stashed files.
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s+='$'
            fi;

        fi;

        # Get the short symbolic ref.
        # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
        # Otherwise, just give up.
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
            git rev-parse --short HEAD 2> /dev/null || \
            echo '(unknown)')";

        [ -n "${s}" ] && s=" [${s}]";

        echo -e " ${1}${branchName}${blue}${s}"
    else
        return;
    fi;
}

cmd_status()
{
    if [ $? -eq 0 ]; then
        # color=`tput setaf 2`
        s="[${green}OK${reset}]"
        color_offset="${#green}+${#reset}"
    else
        # color=`tput setaf 1`
        s="[${red}FAILED${reset}]"
        color_offset="${#red}+${#reset}"
    fi
    # Right handed
    PS1R="$(date +%k:%M) ${s}"
    printf "%$(($COLUMNS+$color_offset))s" "$PS1R"
    # Left handed
    # echo -e "${s} $(date +%k:%M)"
}

virtualenv_prompt()
{
    if [ -z $VIRTUAL_ENV ]; then
        return 0
    fi
    virtualenv_name="$(basename $VIRTUAL_ENV)"
    echo -e " (${virtualenv_name})"

}

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
    user_style="${red}"
else
    user_style="${orange}"
fi

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
    host_style="${bold}${red}"
else
    host_style="${yellow}"
fi


# Shows on the right
PS1="\$(cmd_status)\n"
# User
PS1+="\[${user_style}\]\u\[${reset}\]"
# Hostname
PS1+=" at \[${host_style}\]\h\[${reset}\]"
# Current working directory
PS1+=" in \[${green}\]\w\[${reset}\]"
# Git branch and git status clues
PS1+="\[${violet}\]\$(git_prompt)\[${reset}\]"
# Virtual environment
PS1+="\$(virtualenv_prompt)"
# Prompt itself
PS1+="\n\$ "

# Line continuation prompt
PS2="\[${yellow}\]→ \[${reset}\]"


##############
# old prompt #
##############

# if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
#     c_reset=`tput sgr0`
#     c_user=`tput setaf 2; tput bold`
#     c_path=`tput setaf 4; tput bold`
#     c_green=`tput setaf 2`
#     c_red=`tput setaf 1`
#     c_git_clean=$c_green
#     c_git_dirty=$c_red
# else
#     c_reset=
#     c_user=
#     c_path=
#     c_git_clean=
#     c_git_dirty=
# fi

# t_red="\[\033[01;31m\]"
# t_blue="\[\033[01;34m\]"
# t_black="\[\033[00m\]"
# # New version
# t_cyan='\[\e[0;36m\]'         # Cyan
# t_yellow='\[\e[0;33m\]'       # Yellow
# t_green='\[\e[0;32m\]'        # Green
# t_reset='\[\e[0m\]'           # Text Reset

# git_prompt()
# {
#     if ! git rev-parse --git-dir > /dev/null 2>&1; then
#         return 0
#     fi

#     git_branch=$(git branch 2>/dev/null| sed -n '/^\*/s/^\* //p')
#     git_dirty=""

#     if ! git diff --quiet 2>/dev/null >&2; then
#         git_dirty += "*"
#     fi

#     # echo " [${git_branch}${git_dirty}]"
#     echo " on ${green}${git_branch}${git_dirty}${reset}"
# }

# # Prompt
# PS1="${t_cyan}\h${t_yellow} \W${t_reset}\$(git_prompt) \$${t_reset} "

